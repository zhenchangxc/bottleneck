// Generated by CoffeeScript 2.3.2
(function() {
  var DLList, Events, Queues;

  DLList = require("./DLList");

  Events = require("./Events");

  Queues = class Queues {
    constructor(num_priorities) {
      this.Events = new Events(this);
      this._length = 0;
      // an array of DLList.
      // num_priorities >= 1 ? _lists.lenth = num_priorities : _lists.length = (2 - num_priorities)
      this._lists = (function() {
        const results = []; 
        for (let j = 1; (num_priorities >= 1 ? j <= num_priorities : j >= num_priorities); 1 <= num_priorities ? ++j : --j) {
          results.push(new DLList(this));
        }
        return results;
      }).call(this);
    }

    incr() {
      if (this._length++ === 0) {
        // Called when length was 0 before calling incr().
        return this.Events.trigger("leftzero");
      }
    }

    decr() {
      if (--this._length === 0) {
        return this.Events.trigger("zero");
      }
    }

    /**
     * Add job to the queue of the specified priority.
     * 
     * @param {Number} priority num_priorities >= 1 ? priority in (0 ~ num_priorities-1) : priority in (0 ~ 1-num_priorities) 
     * @param {Object} job { task, args, callback } 
     */
    push(priority, job) {
      return this._lists[priority].push(job);
    }

    queued(priority) {
      if (priority != null) {
        return this._lists[priority].length;
      } else {
        return this._length;
      }
    }

    shiftAll(fn) {
      return this._lists.forEach(function(list) {
        return list.forEachShift(fn);
      });
    }

    getFirst(arr = this._lists) {
      var j, len, list;
      for (j = 0, len = arr.length; j < len; j++) {
        list = arr[j];
        if (list.length > 0) {
          return list;
        }
      }
      return [];
    }

    shiftLastFrom(priority) {
      return this.getFirst(this._lists.slice(priority).reverse()).shift();
    }

  };

  module.exports = Queues;

}).call(this);
