// Generated by CoffeeScript 2.3.2
(function() {
  var DLList, Sync,
    splice = [].splice;

  DLList = require("./DLList");

  Sync = class Sync {
    constructor(name, Promise) {
      this.submit = this.submit.bind(this);
      this.name = name;
      this.Promise = Promise;
      this._running = 0;
      this._queue = new DLList();
    }

    isEmpty() {
      return this._queue.length === 0;
    }

    _tryToRun() {
      var next;
      if ((this._running < 1) && this._queue.length > 0) {
        this._running++;
        next = this._queue.shift();
        return next.task(...next.args, (...args) => {
          this._running--;
          this._tryToRun();
          return typeof next.cb === "function" ? next.cb(...args) : void 0;
        });
      }
    }

    submit(task, ...args) {
      var cb, ref;
      ref = args, [...args] = ref, [cb] = splice.call(args, -1);
      this._queue.push({task, args, cb});
      return this._tryToRun();
    }

    schedule(task, ...args) {
      var wrapped;
      wrapped = function(...args) {
        var cb, ref;
        ref = args, [...args] = ref, [cb] = splice.call(args, -1);
        return (task(...args)).then(function(...args) {
          return cb(null, ...args);
        }).catch(function(...args) {
          return cb(...args);
        });
      };
      return new this.Promise((resolve, reject) => {
        return this.submit(wrapped, ...args, function(...args) {
          return (args[0] != null ? reject : (args.shift(), resolve))(...args);
        });
      });
    }

  };

  module.exports = Sync;

}).call(this);
