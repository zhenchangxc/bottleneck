// Generated by CoffeeScript 2.3.2
(function() {
  var Events;

  Events = class Events {
    constructor(instance) {
      this.instance = instance;
      this._events = {}; // { name: [ { cb, status }, ... ], name2: [...] }
      if ((this.instance.on != null) || (this.instance.once != null) || (this.instance.removeAllListeners != null)) {
        throw new Error("An Emitter already exists for this object");
      }
      this.instance.on = (name, cb) => {
        return this._addListener(name, "many", cb);
      };
      this.instance.once = (name, cb) => {
        return this._addListener(name, "once", cb);
      };
      this.instance.removeAllListeners = (name = null) => {
        if (name != null) {
          return delete this._events[name];
        } else {
          return this._events = {};
        }
      };
    }

    /**
     * Add a listener to the listener array of the named event.
     *
     * @param {String} name 
     * @param {String} status of listener, e.g.: once, error
     * @param {Function} cb listener function
     */
    _addListener(name, status, cb) {
      if (this._events[name] == null) {
        this._events[name] = [];
      }
      this._events[name].push({cb, status});
      return this.instance;
    }

    listenerCount(name) {
      if (this._events[name] != null) {
        return this._events[name].length;
      } else {
        return 0;
      }
    }

    /**
     * Trigger all the listeners of the specified named event with the provided arguments.
     *
     * @param  {String} name of the event
     * @param  {...any} args arguments of the listeners.
     * @returns the first defined return value of the listener or undefined.
     */
    async trigger(name, ...args) {
      try {
        if (name !== "debug") {
          this.trigger("debug", `Event triggered: ${name}`, args);
        }
        if (this._events[name] == null) {
          return;
        }
        this._events[name] = this._events[name].filter(listener => listener.status !== "none");
        const promises = this._events[name].map(async (listener) => {
          if (listener.status === "once") {
            // Change the listener status to none so it will be removed and not triggered next time for the same named event.
            listener.status = "none";
          }
          try {
            // Call the listener and return the resolved result.
            const returned = typeof listener.cb === "function" ? listener.cb(...args) : void 0;
            if (typeof (returned != null ? returned.then : void 0) === "function") {
              return (await returned);
            } else {
              return returned;
            }
          } catch (error) {
            if ("name" !== "error") {
              this.trigger("error", error);
            }
            return null;
          }
        });
        return (await Promise.all(promises)).find(x => x != null);
      } catch (error) {
        if ("name" !== "error") {
          this.trigger("error", error);
        }
        return null;
      }
    }
  };

  module.exports = Events;

}).call(this);
